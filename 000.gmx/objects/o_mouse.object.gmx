<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.anyaction = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (mouse_check_button_pressed(mb_right)) {
    global.anyaction = true;
    
    store = noone;
    store = instance_position(mouse_x, mouse_y, o_store);
    for(idx = 0; idx &lt; instance_number(o_store_box); idx++) {
        with (instance_find(o_store_box, idx)) { instance_destroy(); }
    }
    for(idx = 0; idx &lt; instance_number(o_info_box); idx++) {
            with (instance_find(o_info_box, idx)) { instance_destroy(); }
        }
    if (store == noone) store = instance_position(mouse_x, mouse_y, o_fap);
    if (store != noone) {
        store.box = s_create_store_box(store);
    }
    
    casualty = noone
    casualty = instance_position(mouse_x, mouse_y, o_casualty);
    if (casualty != noone) {
        casualty.box = s_create_info_box(casualty);
    }
}


if (mouse_check_button_pressed(mb_left) &amp;&amp; ! global.anyaction) {
    x = mouse_x
    y = mouse_y
}
global.anyaction = false

// CAMERA
//first place the view so it centers your object sprite
/*view_xview = x - view_wview / 2 + sprite_width / 2;
view_yview = y - view_hview / 2 + sprite_height / 2;
//then check if you are out of bound and place it inbound if it's out
if(view_xview &lt; 0) 
{
    view_xview = 0;
}
else if(view_xview &gt; room_width - view_wview)
{
    view_xview = room_width - view_wview
}
if(view_yview &lt; 0)
{
    view_yview = 0;
}
else if(view_yview &gt; room_height - view_hview)
{
    view_yview = room_height - view_hview
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_casualty</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>name = 'casualty';
text = 'is default text'
debug = false;
danger = noone
selected = false
go_to = noone
state = 'idle'
move_speed = 1
analysis = instance_create(x, y, o_analysis)
path = path_add()
menu_items = ds_list_create()
state_time = 0;
tmp_waypoint = ds_list_create()
life = max(15 * room_speed, irandom(60) * room_speed)
event = noone
next_state = 'idle'
my_health = 5
is_seeking_help = false
found_ambo = false
effect = "default"
next_effect = effect;
timer = 0;
wait_for_effect = 2 * room_speed; // delay in effect changes
alarm[9] = 1;
ds_list_add(menu_items, 'danger')
ds_list_add(menu_items, 'look')

image_speed = 0
image_index = irandom(4)

// known problems
problems = ds_list_create()

// drabcde steps
actions = ds_list_create() // holds the actions
active = 1 // buttons active for this menu

// testing shit
//danger = s_add_danger('live wire is near the casualty', 'elec')\
if (irandom(99) &lt; 50) {
    danger = s_add_rand_danger()
    ds_list_add(actions, danger);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="9">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>my_health++
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// THINKING
state = next_state;
state_time++

effect = next_effect;

// Event follow casualty
if (instance_exists(event)) {
    event.x = x;
    event.y = y;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// IDLE
depth = y * -1;
life-- // actualy determines when they leave, not their health

if (state == 'idle') {
    if (life &lt; 0) {
       go_to = o_casualty_end
    }
    if (go_to != noone) {
        // Create a valid path
        if (!mp_grid_path(global.path.grid, path, x, y, go_to.x, go_to.y, true)) {
            go_to = s_find_nearest_spot(go_to, self);
        }

        if (go_to != noone) {
            next_state = 'move'
            py = y
            px = x
            path_start(path, move_speed, path_action_stop, 0)
        }
        
    }
    else if (state_time &gt; (5 * room_speed)) {
        go_to = instance_find(o_store, random(instance_number(o_store)))
    }
    if (next_state != 'idle') state_time = 0
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// MOVE

if (state == 'move') {
    if (distance_to_object(go_to) &lt;= 2) { 
        if (o_casualty_end == go_to) {
            ds_list_add(o_player.log, 'casualty left')
            instance_destroy()
        }
        else {
            parent = go_to.parent
            if (parent) {
                if (object_get_name(parent.object_index) == "o_store") next_state = "shop"
            }
            go_to = noone
        }
    }
    // healing
    if (is_seeking_help &amp;&amp; alarm[0] &lt; 1) {
        next_state = 'heal'
    }
    
    if (go_to == noone &amp;&amp; next_state == "move") {
        next_state = 'idle'   
    }
    if (next_state != 'move') state_time = 0
}    
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// SHOP
if(state == "shop") {
    if (state_time &gt; 5 * room_speed) next_state = "idle"
    if (event == noone &amp;&amp; state_time &gt; room_speed) {
        event = instance_create(x, y, o_event)
    }   
    
    if (next_state != 'shop') {
        state_time = 0;
        with (event) { instance_destroy(); }
        event = noone;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// HEAL
if (state == 'heal') {
    if (my_health == 5) {
        is_seeking_help = false
        next_state = 'idle'
        next_effect = "default"
    }
    if ((is_seeking_help &amp;&amp; alarm[0] &lt; 1)) {
        var closest = s_find_nearest_service("ambo");
        if (distance_to_object(closest) &gt; 15) is_seeking_help = false // resets movement if dude moves away
        else {
            alarm[0] = 3 * room_speed;
            event = instance_create(x, y, o_event);
            event.sprite_index = spr_healing;
            state_timer = 0;
        }
    } else if (is_seeking_help &amp;&amp; state_timer &gt; 5 * room_speed) {
        next_state = 'idle'
    }
    if (next_state != 'heal') state_timer = 0;
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// EFFECT:DEFAULT
if (effect == 'default' &amp;&amp; alarm[9] &lt; 0) {
    alarm[9] = wait_for_effect;
    
    if (my_health &lt; 3) {
        next_effect = 'sick';
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///EFFECT:SICK

if (effect == 'sick') {
    // Continuous effects
    
    // make others sick
    for(idx = 0; idx &lt; instance_number(o_casualty); idx++) {
        near_by = instance_find(o_casualty, idx);
        if (instance_exists(near_by)) {
            if (distance_to_object(near_by) &lt; global.control.sick_radius
                &amp;&amp; distance_to_object(near_by) &gt; 3) {
                
                near_by.timer++;
                if (near_by.timer &gt; global.control.sick_min_time) {
                    s_take_life(near_by)
                    near_by.timer = 0
                }
            }
        }
    }

    // Event changes and processing
    if(alarm[9] &lt; 0) {
        alarm[9] = wait_for_effect;
    
        // find help
        if (! is_seeking_help) {
            found_ambo = false;
            for(idx = 0; idx &lt; instance_number(o_service); idx++) {
                service = instance_find(o_service, idx);
                if (service.sprite_index == spr_player) { // find an ambulance officer
                    if (distance_to_object(service) &lt;= 60) {
                        go_to = service;
                        next_state = 'idle';
                        is_seeking_help = true;
                        found_ambo = true
                    }
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// EFFECT:ANGRY
if (effect == 'angry' &amp;&amp; alarm[9] &lt; 0) {
    alarm[9] = wait_for_effect;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>s_take_life(self)
global.anyaction = true
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self()
if (global.debug) {
    draw_set_font(f_drabcde)
    draw_set_colour(c_red)
    draw_text(x - sprite_width, y - sprite_height, state + ":" + string(effect))
    if (path != noone) {
        draw_set_colour(c_red)
        draw_path(path, px, py, false);
    }
    if (selected) {
        for (idx = 0; idx &lt; ds_list_size(problems); idx++) {
            problem_to_draw = "spr_w_" + string(problems[| idx])
            draw_sprite(s_find_sprite(problems[| idx]), 0, x + (10 * idx), y - 50)
        }
    }
}
/*if (effect == 'sick') {
    draw_set_color(c_green)
    draw_circle(x, y, global.control.sick_radius, true);
}*/

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

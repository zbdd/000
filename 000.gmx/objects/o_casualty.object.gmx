<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_casualty</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>name = 'casualty';
text = 'is default text'
debug = false;
danger = noone
selected = false
go_to = noone
state = 'idle'
move_speed = 1
analysis = instance_create(x, y, o_analysis)
path = path_add()
menu_items = ds_list_create()
state_time = 0;
tmp_waypoint = ds_list_create()
life = max(15 * room_speed, irandom(60) * room_speed)
event = noone
next_state = 'idle'
ds_list_add(menu_items, 'danger')
ds_list_add(menu_items, 'look')

image_speed = 0
image_index = irandom(4)

// known problems
problems = ds_list_create()

// drabcde steps
actions = ds_list_create() // holds the actions
active = 1 // buttons active for this menu

// testing shit
//danger = s_add_danger('live wire is near the casualty', 'elec')\
if (irandom(99) &lt; 50) {
    danger = s_add_rand_danger()
    ds_list_add(actions, danger);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// THINKING
state = next_state;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// IDLE
depth = y * -1;
state_time++
life--

if (state == 'idle') {
    if (life &lt; 0) {
       go_to = o_casualty_end
    }
    if (go_to != noone) {
        next_state = 'move'
        //show_debug_message("x: " + string(go_to.x) + "y: " + string(go_to.y))
        for(idw = 0; idw &lt; ds_list_size(tmp_waypoint); idw++) {
            with (tmp_waypoint[| idw]) instance_destroy()
        }
        ds_list_clear(tmp_waypoint) // remove previous
        if (!mp_grid_path(global.path.grid, path, x, y, go_to.x, go_to.y, true)) {
            for(ida = 0; ida &lt; 361; ida+=45) {
                cx = go_to.x + 32 * cos(ida * pi / 180);
                cy = go_to.y + 32 * sin(ida * pi / 180);
                var waypoint = instance_create(cx,cy,o_waypoint);
                waypoint.parent = go_to;
                ds_list_add(tmp_waypoint, waypoint)
            }
        }
        closest = distance_to_object(go_to)
        for(idw = 0; idw &lt; ds_list_size(tmp_waypoint); idw++) {
            change = false
            with (tmp_waypoint[| idw]) {
                //show_debug_message("closest: " + string(other.closest) + " this: " + string(distance_to_object(other)));
                if(distance_to_object(other) &lt; other.closest) other.change = true
            }
            if (change) go_to = tmp_waypoint[| idw]
        }
        //show_debug_message("x: " + string(go_to.x) + "y: " + string(go_to.y))
        mp_grid_path(global.path.grid, path, x, y, go_to.x, go_to.y, true)
        py = y
        px = x
        path_start(path, move_speed, path_action_stop, 0)
        
    }
    else if (state_time &gt; (5 * room_speed)) {
        go_to = instance_find(o_store, random(instance_number(o_store)))
    }
    if (next_state != 'idle') state_time = 0
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// MOVE

if (state == 'move') {
    if (distance_to_object(go_to) &lt;= 1) 
        if (o_casualty_end == go_to) {
            ds_list_add(o_player.log, 'casualty left')
            instance_destroy()
        }
        else {
            if (object_get_name(go_to.parent.object_index) == "o_store") next_state = "shop"
            go_to = noone
        }
    
    if (go_to == noone &amp;&amp; next_state == "move") {
        next_state = 'idle'   
    }
    if (next_state != 'move') state_time = 0
}    
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// SHOP
if(state == "shop") {
    if (state_time &gt; 5 * room_speed) next_state = "idle"
    if (event == noone &amp;&amp; state_time &gt; room_speed) {
        event = instance_create(x, y, o_event)
    }   
    
    if (next_state != 'shop') {
        state_time = 0;
        with (event) { instance_destroy(); }
        event = noone;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self()
draw_set_font(f_drabcde)
draw_set_colour(c_red)
draw_text(x - sprite_width, y - sprite_height, state)
if (path != noone) {
    draw_set_colour(c_red)
    draw_path(path, px, py, false);
}
if (selected) {
    for (idx = 0; idx &lt; ds_list_size(problems); idx++) {
        problem_to_draw = "spr_w_" + string(problems[| idx])
        draw_sprite(s_find_sprite(problems[| idx]), 0, x + (10 * idx), y - 50)
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

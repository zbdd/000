<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>text = '';
budget = 0
steps = 0
seconds = 0
minutes = 0
draw_seconds = "00"
draw_minutes = "00"
close = instance_create(x, y, o_button)
debug = instance_create(x + 10, view_hview - 74, o_debug)

m1 = instance_create(x + view_wview - 60, view_yview + 20, o_fa)
m2 = instance_create(x + view_wview - 60, view_yview + 65, o_menu_fap)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//x = view_xview
//y = view_yview
debug.x = view_xview
debug.y = view_yview + view_hview - 74
close.x = x + 60
close.y = y + 80

steps += 1
minutes = floor((steps/room_speed)/60) // Figure out the minutes
seconds = floor(steps/room_speed) - (minutes*60) // Figure out the seconds

// Figure out the strings (so that numbers below 10 draw as 0X not just X)
if (minutes&lt;10) {draw_minutes=string(minutes) draw_minutes=string_insert("0",draw_minutes,0)}
else {draw_minutes=string(minutes)}

if (seconds&lt;10) {draw_seconds=string(seconds) draw_seconds=string_insert("0",draw_seconds,0)}
else {draw_seconds=string(seconds)}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw GUI
draw_set_colour(c_red)
draw_set_font(f_drabcde)
draw_text(x, y + 20, "Time: " + draw_minutes + "m : " + draw_seconds + "s") // Draw time with a colon as a separator

// if calling services, show progress
if (instance_exists(global.control)) {
    if (global.control.calling) {
        draw_set_colour(c_black)
        draw_rectangle(x + 320, y, x + 420, y + 30, false)
        draw_set_colour(c_red)
        draw_rectangle(x + 320, y, x + 320 + ((global.control.timer/global.control.TIMER_MAX) * 100), y + 30, false)
        draw_set_colour(c_black)
        draw_set_font(f_drabcde_small)
        draw_text(x + 320, y + 7, 'Calling services')
    }

    // draw the current budget
    draw_text(x, y + 60, "Budget: " + string(global.control.budget));
    draw_text(view_wview[0] + 250, y + 20, "Services")
    
    
    // stats
    // visitors
    draw_text(x + 250, view_hview + 200, "Visitors:");
    draw_set_color(c_black)
    draw_rectangle(x + 340, view_hview + 200, x + 440, view_hview + 220, false);
    draw_set_colour(c_red)
    draw_rectangle(x + 340, view_hview + 200, x + 340 + ((instance_number(o_casualty)/global.control.max_casualties) * 100), view_hview + 220, false);

    // sick
    draw_set_color(c_red)
    draw_text(x + 250, view_hview + 240, "Unwell:");
    draw_set_color(c_black)
    draw_rectangle(x + 340, view_hview + 240, x + 440, view_hview + 260, false);
    draw_set_colour(c_red)
    draw_rectangle(x + 340, view_hview + 240, x + 340 + ((s_count_sick()/global.control.max_casualties) * 100), view_hview + 260, false);
    
}
// debug purposes, show what the user has done
for (idx = 0; idx &lt; ds_list_size(o_player.log) &amp;&amp; idx &lt; 5; idx++) {
    draw_set_colour(c_red)
    draw_set_font(f_drabcde_small)
    draw_text(x, y + 80, 'Action log:')
    draw_text(x, y + 100 + (20 * idx), o_player.log[| ds_list_size(o_player.log) - idx - 1])
}

// Main task ahead progress update
/*if (global.control.state == 'danger') {
    if (global.control.danger_check &gt; 0) {
        draw_text(x + 160, y, 'DANGER')
        
        for (idx = 0; idx &lt; global.control.danger_check; idx++) {
            draw_sprite(spr_box, 0, x + 175 + (40 * idx), y + 40)
        }
        
        for (idx = 0; idx &lt; global.control.danger_done; idx++) {
            draw_sprite(spr_spotted, 0, x + 175 + (40 * idx), y + 40)
        }
        
        count = 0
        for (idx = 0; idx &lt; ds_list_size(o_player.log); idx++) {
            if (o_player.log[| idx] == 'service arrived') count++
            
            if (count &gt; 0) draw_sprite(spr_tick, 0, x + 175 + (40 * count), y + 40)
        }
    }
}
if (global.control.state == 'response') {
    draw_text(x + 160, y, 'RESPONSE')
}
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

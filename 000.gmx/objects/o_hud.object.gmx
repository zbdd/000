<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>text = ''
steps = 0
seconds = 0
minutes = 0
draw_seconds = "00"
draw_minutes = "00"
close = instance_create(x, y, o_button)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x = view_xview[0] + 10
y = view_yview[0] + 10
close.x = x + 60
close.y = y + 80


steps += 1
minutes = floor((steps/room_speed)/60) // Figure out the minutes
seconds = floor(steps/room_speed) - (minutes*60) // Figure out the seconds

// Figure out the strings (so that numbers below 10 draw as 0X not just X)
if (minutes&lt;10) {draw_minutes=string(minutes) draw_minutes=string_insert("0",draw_minutes,0)}
else {draw_minutes=string(minutes)}

if (seconds&lt;10) {draw_seconds=string(seconds) draw_seconds=string_insert("0",draw_seconds,0)}
else {draw_seconds=string(seconds)}

if (string_length(text) &gt; 0) {
    // Reset text
    button = instance_position(mouse_x, mouse_y, o_button)
    if (mouse_check_button(mb_any)  &amp;&amp; button != noone) {
        if (button.text = 'OKAY') {
            text = ''
            close.text = ''
        }
    } else close.text = 'OKAY'
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_colour(c_red)
draw_set_font(f_drabcde)
draw_text(x, y, "Time: " + draw_minutes + "m : " + draw_seconds + "s") // Draw time with a colon as a separator
if (global.control.danger_check &gt; 0) {
    draw_text(x + 160, y, 'DANGER PRESENT')
    for (idx = 0; idx &lt; global.control.danger_check; idx++) {
        draw_sprite(spr_box, 0, x + 175 + (40 * idx), y + 40)
    }
    for (idx = 0; idx &lt; global.control.danger_done; idx++) {
        draw_sprite(spr_tick, 0, x + 175 + (40 * idx), y + 40)
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

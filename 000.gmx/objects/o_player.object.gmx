<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = 0
image_index = 0

move_speed = 2
state = 'thinking'
next_state = 'idle'
actions = ds_list_create()
log = ds_list_create()
hud = instance_create(x, y, o_hud)
menu = ds_list_create()
problems = ds_list_create()
selected = false
casualty = noone

// defaults
danger = s_add_danger('', '')
ds_list_add(actions, danger);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// THINKING
speed = 0

// garbage collection
if (next_state != 'menu') {
    for(idx = 0; idx &lt; ds_list_size(menu); idx++) {
        with (menu[| idx]) { instance_destroy(); }
    }
    if (casualty != noone) casualty.selected = false
    ds_list_clear(menu)
}
    
state = next_state

// CAMERA
//first place the view so it centers your object sprite
view_xview = x - view_wview / 2 + sprite_width / 2;
view_yview = y - view_hview / 2 + sprite_height / 2;
//then check if you are out of bound and place it inbound if it's out
if(view_xview &lt; 0) 
{
    view_xview = 0;
}
else if(view_xview &gt; room_width - view_wview)
{
    view_xview = room_width - view_wview
}
if(view_yview &lt; 0)
{
    view_yview = 0;
}
else if(view_yview &gt; room_height - view_hview)
{
    view_yview = room_height - view_hview
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// IDLE
image_index = 0

if (state == 'idle' &amp;&amp; speed == 0) {   
    // Mouse directed movement
    if (mouse_check_button(mb_left)) {
        if (place_meeting(mouse_x, mouse_y, o_fa))
            next_state = "interrupt"
        else move_towards_point(mouse_x, mouse_y, move_speed)
    }
    else speed = 0
    
    // Right clicking for contextual menu
    if (mouse_check_button_pressed(mb_right)) {
        if (ds_list_size(menu) == 0) {
            casualty = instance_position(mouse_x, mouse_y, o_casualty)
            
            if (casualty == noone) {
                casualty = instance_position(mouse_x, mouse_y, o_player)
            } else {
                menu = s_create_menu(mouse_x, mouse_y, casualty.menu_items)
                casualty.selected = true
                next_state = 'menu'
            }
            
            if (casualty != noone &amp;&amp; !casualty.selected) {
                menu = s_create_player_menu(mouse_x, mouse_y)
                casualty.selected = true
                next_state = 'menu'
            }      
        } /*else {
            
        }*/
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// MENU

if (state == 'menu') {
    call = false
    
    // Destroy menu
    if (mouse_check_button_pressed(mb_right)) {
        next_state = 'idle'
    }
    // Main casualty menu
    else if (mouse_check_button_pressed(mb_left)) {
        button = instance_position(mouse_x, mouse_y, o_button)
        
        if (button != noone) {
            switch (button.type) {
                case 'danger':
                    if (ds_list_size(casualty.actions) &gt; 0) {
                        problem = ds_list_find_index(casualty.problems, casualty.actions[| 0].type)
                        
                        if (problem == -1) {
                            ds_list_add(o_player.log, 'danger checked')
                            ds_list_add(casualty.problems, casualty.actions[| 0].type)
                            ds_list_delete(casualty.menu_items, ds_list_find_index(casualty.menu_items, 'danger'))
                            global.control.danger_done++
                        }
                    }
                break
            }
            if(!global.control.calling) {
                switch(button.type) {
                    case 'elec':
                        ds_list_add(o_player.log, 'call elec')
                        call = true
                    break;
                    
                    case 'police':
                        ds_list_add(o_player.log, 'call police')
                        call = true
                    break;
                    
                    case 'env':
                        ds_list_add(o_player.log, 'call ses')
                        call = true
                    break;
                }
                if(call) {
                    if (ds_list_find_index(actions, button.type)) ds_list_add(o_player.log, 'extra call')
                    ds_list_add(actions, button.type)
                    next_state = 'call'
                }
            }
        }
    }
    
    // prep next state
    if (next_state == 'call')
        if (!global.control.calling) global.control.calling = true
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// CALL

if (state == 'call') {
    image_index = 1
    
    if (mouse_check_button_pressed(mb_right)) {
        global.control.calling = false;
        next_state = 'idle'
    } else if (!global.control.calling) {
        s_create_service(actions[| (ds_list_size(actions) - 1)])
        next_state = 'idle'
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// INTERRUPT

if (state == 'interrupt') {
    if (mouse_check_button(mb_left)) next_state = 'idle'
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
